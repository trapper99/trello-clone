import { useStorage } from '@vueuse/core'
import { v4 as uuid } from 'uuid'
import { defineStore } from 'pinia'
import { computed } from 'vue'
import boardData from '~/data/board.json'

export const useBoardStore = defineStore('boardStore', () => {
  const board = useStorage('board', boardData)

  const getTask = computed(() => {
    return (taskId: string) => {
        for (const column of board.value.columns) {
          const task = column.tasks.find(task => task.id === taskId)
          if (task) {
            return task
          }
        }
    }
  })

  /**
   * Adds a task to the specified column with a unique id generated by uuid().
   * @param {number} columnIndex - The index of the column to add the task to.
   * @return {void} This function does not return anything.
   */
  function addTask({columnIndex, taskName}: { columnIndex: number, taskName: string }): void {
    board.value.columns[columnIndex].tasks.push({
      id: uuid(),
      name: taskName,
      description: ''
    })
  }

/**
 * Deletes a task from the board with the given taskId.
 *
 * @param {string} taskId - The id of the task to delete.
 * @return {void} This function does not return anything.
 */
  function deleteTask(taskId: string): void {
    for (const column of board.value.columns) {
      const taskIndex = column.tasks.findIndex(task => task.id === taskId)

      if (taskIndex !== -1) {
        column.tasks.splice(taskIndex, 1)
        return
      }
    }
  }

  /**
   * Adds a new column to the board with the given name.
   *
   * @param {string} columnName - The name of the column to add.
   * @return {void} This function does not return anything.
   */
  function addColumn(columnName: string): void {
    board.value.columns.push({
      name: columnName,
      tasks: []
    })
  }

/**
 * Deletes a column from the board at the specified index.
 *
 * @param {number} columnIndex - The index of the column to delete.
 * @return {void} This function does not return anything.
 */
  function deleteColumn(columnIndex: number): void {
    board.value.columns.splice(columnIndex, 1)
  }

  /**
   * Moves a column from one index to another within the board.
   * @param {number} fromColumnIndex - The index of the column to move from.
   */
  function moveColumn({ fromColumnIndex, toColumnIndex }: { fromColumnIndex: number, toColumnIndex: number }) {
    const column = board.value.columns.splice(fromColumnIndex, 1)[0]
    board.value.columns.splice(toColumnIndex, 0, column)
  }

/**
 * Moves a task from one column to another within the board.
 *
 * @param {Object} options - The options for moving the task.
 * @param {number} options.fromColumnIndex - The index of the column where the task is currently located.
 * @param {number} options.toColumnIndex - The index of the column where the task should be moved to.
 * @param {number} options.fromTaskIndex - The index of the task within the source column.
 * @param {number} options.toTaskIndex - The index where the task should be inserted within the destination column.
 * @return {void} This function does not return anything.
 */
  function moveTask({
    fromColumnIndex,
    toColumnIndex,
    fromTaskIndex,
    toTaskIndex
  }: {
    fromColumnIndex: number
    toColumnIndex: number
    fromTaskIndex: number
    toTaskIndex: number
  }) {
    const task = board.value.columns[fromColumnIndex].tasks.splice(fromTaskIndex, 1)[0]
    board.value.columns[toColumnIndex].tasks.splice(toTaskIndex, 0, task)
  }

  return {
    board,
    getTask,
    addTask,
    deleteTask,
    addColumn,
    deleteColumn,
    moveColumn,
    moveTask
  }
})
